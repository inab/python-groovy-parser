/* converted on Thu Apr 20, 2023, 02:11 (UTC+02) by antlr_4-to-w3c v0.64 which is Copyright (c) 2011-2023 by Gunther Rademacher <grd@gmx.net> */

compilationUnit
         ::= nls ( packageDeclaration sep? )? scriptStatements? EOF
scriptStatements
         ::= scriptStatement ( sep scriptStatement )* sep?
scriptStatement
         ::= importDeclaration
           | typeDeclaration
           | methodDeclaration
           | statement
packageDeclaration
         ::= annotationsOpt PACKAGE qualifiedName
importDeclaration
         ::= annotationsOpt IMPORT STATIC? qualifiedName ( DOT MUL | AS identifier )?
typeDeclaration
         ::= classOrInterfaceModifiersOpt classDeclaration
modifier ::= classOrInterfaceModifier
           | NATIVE
           | SYNCHRONIZED
           | TRANSIENT
           | VOLATILE
           | DEF
           | VAR
modifiersOpt
         ::= ( modifiers nls )?
modifiers
         ::= modifier ( nls modifier )*
classOrInterfaceModifiersOpt
         ::= ( classOrInterfaceModifiers NL* )?
classOrInterfaceModifiers
         ::= classOrInterfaceModifier ( nls classOrInterfaceModifier )*
classOrInterfaceModifier
         ::= annotation
           | PUBLIC
           | PROTECTED
           | PRIVATE
           | STATIC
           | ABSTRACT
           | FINAL
           | STRICTFP
           | DEFAULT
variableModifier
         ::= annotation
           | FINAL
           | DEF
           | VAR
           | PUBLIC
           | PROTECTED
           | PRIVATE
           | STATIC
           | ABSTRACT
           | STRICTFP
variableModifiersOpt
         ::= ( variableModifiers nls )?
variableModifiers
         ::= variableModifier ( nls variableModifier )*
typeParameters
         ::= LT nls typeParameter ( COMMA nls typeParameter )* nls GT
typeParameter
         ::= className ( EXTENDS nls typeBound )?
typeBound
         ::= type ( BITAND nls type )*
typeList ::= type ( COMMA nls type )*
classDeclaration
         ::= ( CLASS | AT? INTERFACE | ENUM | TRAIT ) identifier nls ( typeParameters nls )? ( EXTENDS nls typeList nls )? ( IMPLEMENTS nls typeList nls )? classBody
classBody
         ::= LBRACE nls ( enumConstants ( nls COMMA )? sep? )? ( classBodyDeclaration ( sep classBodyDeclaration )* )? sep? RBRACE
enumConstants
         ::= enumConstant ( nls COMMA nls enumConstant )*
enumConstant
         ::= annotationsOpt identifier arguments? anonymousInnerClassDeclaration?
classBodyDeclaration
         ::= ( STATIC nls )? block
           | memberDeclaration
memberDeclaration
         ::= methodDeclaration
           | fieldDeclaration
           | modifiersOpt classDeclaration
methodDeclaration
         ::= modifiersOpt typeParameters? ( returnType nls )? methodName formalParameters ( DEFAULT nls elementValue | ( nls THROWS nls qualifiedClassNameList )? ( nls methodBody )? )?
methodName
         ::= identifier
           | stringLiteral
returnType
         ::= standardType
           | VOID
fieldDeclaration
         ::= variableDeclaration
variableDeclarators
         ::= variableDeclarator ( COMMA nls variableDeclarator )*
variableDeclarator
         ::= variableDeclaratorId ( nls ASSIGN nls variableInitializer )?
variableDeclaratorId
         ::= identifier
variableInitializer
         ::= enhancedStatementExpression
variableInitializers
         ::= variableInitializer nls ( COMMA nls variableInitializer nls )* COMMA?
emptyDims
         ::= ( annotationsOpt LBRACK RBRACK )+
emptyDimsOpt
         ::= emptyDims?
standardType
         ::= annotationsOpt ( primitiveType | standardClassOrInterfaceType ) emptyDimsOpt
type     ::= annotationsOpt ( primitiveType | VOID | generalClassOrInterfaceType ) emptyDimsOpt
classOrInterfaceType
         ::= ( qualifiedClassName | qualifiedStandardClassName ) typeArguments?
generalClassOrInterfaceType
         ::= qualifiedClassName typeArguments?
standardClassOrInterfaceType
         ::= qualifiedStandardClassName typeArguments?
primitiveType
         ::= BuiltInPrimitiveType
typeArguments
         ::= LT nls typeArgument ( COMMA nls typeArgument )* nls GT
typeArgument
         ::= type
           | annotationsOpt QUESTION ( ( EXTENDS | SUPER ) nls type )?
annotatedQualifiedClassName
         ::= annotationsOpt qualifiedClassName
qualifiedClassNameList
         ::= annotatedQualifiedClassName ( COMMA nls annotatedQualifiedClassName )*
formalParameters
         ::= LPAREN formalParameterList? rparen
formalParameterList
         ::= ( formalParameter | thisFormalParameter ) ( COMMA nls formalParameter )*
thisFormalParameter
         ::= type THIS
formalParameter
         ::= variableModifiersOpt type? ELLIPSIS? variableDeclaratorId ( nls ASSIGN nls expression )?
methodBody
         ::= block
qualifiedName
         ::= qualifiedNameElement ( DOT qualifiedNameElement )*
qualifiedNameElement
         ::= identifier
           | DEF
           | IN
           | AS
           | TRAIT
qualifiedNameElements
         ::= ( qualifiedNameElement DOT )*
qualifiedClassName
         ::= qualifiedNameElements identifier
qualifiedStandardClassName
         ::= qualifiedNameElements className ( DOT className )*
literal  ::= IntegerLiteral
           | FloatingPointLiteral
           | stringLiteral
           | BooleanLiteral
           | NullLiteral
gstring  ::= GStringBegin gstringValue ( GStringPart gstringValue )* GStringEnd
gstringValue
         ::= gstringPath
           | closure
gstringPath
         ::= identifier GStringPathPart*
lambdaExpression
         ::= lambdaParameters nls ARROW nls lambdaBody
standardLambdaExpression
         ::= standardLambdaParameters nls ARROW nls lambdaBody
lambdaParameters
         ::= formalParameters
standardLambdaParameters
         ::= formalParameters
           | variableDeclaratorId
lambdaBody
         ::= block
           | statementExpression
closure  ::= LBRACE ( nls ( formalParameterList nls )? ARROW )? sep? blockStatementsOpt RBRACE
closureOrLambdaExpression
         ::= closure
           | lambdaExpression
blockStatementsOpt
         ::= blockStatements?
blockStatements
         ::= blockStatement ( sep blockStatement )* sep?
annotationsOpt
         ::= ( annotation nls )*
annotation
         ::= AT annotationName ( nls LPAREN elementValues? rparen )?
elementValues
         ::= elementValuePairs
           | elementValue
annotationName
         ::= qualifiedClassName
elementValuePairs
         ::= elementValuePair ( COMMA elementValuePair )*
elementValuePair
         ::= elementValuePairName nls ASSIGN nls elementValue
elementValuePairName
         ::= identifier
           | keywords
elementValue
         ::= elementValueArrayInitializer
           | annotation
           | expression
elementValueArrayInitializer
         ::= LBRACK ( elementValue ( COMMA elementValue )* COMMA? )? RBRACK
block    ::= LBRACE sep? blockStatementsOpt RBRACE
blockStatement
         ::= localVariableDeclaration
           | statement
localVariableDeclaration
         ::= variableDeclaration
variableDeclaration
         ::= modifiers nls ( type? variableDeclarators | typeNamePairs nls ASSIGN nls variableInitializer )
           | type variableDeclarators
typeNamePairs
         ::= LPAREN typeNamePair ( COMMA typeNamePair )* rparen
typeNamePair
         ::= type? variableDeclaratorId
variableNames
         ::= LPAREN variableDeclaratorId ( COMMA variableDeclaratorId )+ rparen
conditionalStatement
         ::= ifElseStatement
           | switchStatement
ifElseStatement
         ::= IF expressionInPar nls statement ( ( nls | sep ) ELSE nls statement )?
switchStatement
         ::= SWITCH expressionInPar nls LBRACE nls ( switchBlockStatementGroup+ nls )? RBRACE
loopStatement
         ::= ( FOR LPAREN forControl rparen | WHILE expressionInPar ) nls statement
           | DO nls statement nls WHILE expressionInPar
continueStatement
         ::= CONTINUE identifier?
breakStatement
         ::= BREAK identifier?
tryCatchStatement
         ::= TRY resources? nls block ( nls catchClause )* ( nls finallyBlock )?
assertStatement
         ::= ASSERT expression ( nls ( COLON | COMMA ) nls expression )?
statement
         ::= ( identifier COLON nls )* ( ( SYNCHRONIZED expressionInPar nls )? block | conditionalStatement | loopStatement | tryCatchStatement | RETURN expression? | THROW expression | breakStatement | continueStatement | assertStatement | localVariableDeclaration | statementExpression | SEMI )
catchClause
         ::= CATCH LPAREN variableModifiersOpt catchType? identifier rparen nls block
catchType
         ::= qualifiedClassName ( BITOR qualifiedClassName )*
finallyBlock
         ::= FINALLY nls block
resources
         ::= LPAREN nls resourceList sep? rparen
resourceList
         ::= resource ( sep resource )*
resource ::= localVariableDeclaration
           | expression
switchBlockStatementGroup
         ::= ( switchLabel nls )+ blockStatements
switchLabel
         ::= ( CASE expression | DEFAULT ) COLON
forControl
         ::= enhancedForControl
           | classicalForControl
enhancedForControl
         ::= variableModifiersOpt type? variableDeclaratorId ( COLON | IN ) expression
classicalForControl
         ::= forInit? SEMI expression? SEMI forUpdate?
forInit  ::= localVariableDeclaration
           | expressionList
forUpdate
         ::= expressionList
castParExpression
         ::= LPAREN type rparen
parExpression
         ::= expressionInPar
expressionInPar
         ::= LPAREN enhancedStatementExpression rparen
expressionList
         ::= expressionListElement ( COMMA expressionListElement )*
expressionListElement
         ::= MUL? expression
enhancedStatementExpression
         ::= statementExpression
           | standardLambdaExpression
statementExpression
         ::= commandExpression
postfixExpression
         ::= pathExpression ( INC | DEC )?
expression
         ::= ( castParExpression ( castParExpression | ( BITNOT | NOT ) nls | INC | DEC | ADD | SUB )* )? postfixExpression
           | ( ( BITNOT | NOT ) nls | INC | DEC | ADD | SUB ) expression
           | expression ( ( POWER | ADD | SUB ) nls expression | nls ( ( MUL | DIV | MOD | LT LT? | GT ( GT GT? )? | RANGE_INCLUSIVE | RANGE_EXCLUSIVE | LE | GE | IN | NOT_IN | IDENTICAL | NOT_IDENTICAL | EQUAL | NOTEQUAL | SPACESHIP | REGEX_FIND | REGEX_MATCH | BITAND | XOR | BITOR | AND | OR | QUESTION nls expression nls COLON | ELVIS ) nls expression | ( AS | INSTANCEOF | NOT_INSTANCEOF ) nls type | ( ASSIGN | ADD_ASSIGN | SUB_ASSIGN | MUL_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | RSHIFT_ASSIGN | URSHIFT_ASSIGN | LSHIFT_ASSIGN | MOD_ASSIGN | POWER_ASSIGN | ELVIS_ASSIGN ) nls enhancedStatementExpression ) )
           | variableNames nls ASSIGN nls statementExpression
commandExpression
         ::= expression argumentList? commandArgument*
commandArgument
         ::= commandPrimary ( pathElement* | argumentList )
pathExpression
         ::= ( primary | STATIC ) pathElement*
pathElement
         ::= nls ( DOT nls NEW creator | ( ( DOT | SPREAD_DOT | SAFE_DOT | SAFE_CHAIN_DOT ) nls ( AT | nonWildcardTypeArguments )? | ( METHOD_POINTER | METHOD_REFERENCE ) nls ) namePart | closureOrLambdaExpression )
           | arguments
           | indexPropertyArgs
           | namedPropertyArgs
namePart ::= identifier
           | stringLiteral
           | dynamicMemberName
           | keywords
dynamicMemberName
         ::= parExpression
           | gstring
indexPropertyArgs
         ::= QUESTION? LBRACK expressionList? RBRACK
namedPropertyArgs
         ::= QUESTION? LBRACK ( namedPropertyArgList | COLON ) RBRACK
primary  ::= identifier typeArguments?
           | literal
           | gstring
           | NEW nls creator
           | THIS
           | SUPER
           | parExpression
           | closureOrLambdaExpression
           | list
           | map
           | builtInType
namedPropertyArgPrimary
         ::= identifier
           | literal
           | gstring
           | parExpression
           | list
           | map
namedArgPrimary
         ::= identifier
           | literal
           | gstring
commandPrimary
         ::= identifier
           | literal
           | gstring
list     ::= LBRACK expressionList? COMMA? RBRACK
map      ::= LBRACK ( mapEntryList COMMA? | COLON ) RBRACK
mapEntryList
         ::= mapEntry ( COMMA mapEntry )*
namedPropertyArgList
         ::= namedPropertyArg ( COMMA namedPropertyArg )*
mapEntry ::= ( mapEntryLabel | MUL ) COLON nls expression
namedPropertyArg
         ::= ( namedPropertyArgLabel | MUL ) COLON nls expression
namedArg ::= ( namedArgLabel | MUL ) COLON nls expression
mapEntryLabel
         ::= keywords
           | primary
namedPropertyArgLabel
         ::= keywords
           | namedPropertyArgPrimary
namedArgLabel
         ::= keywords
           | namedArgPrimary
creator  ::= createdName ( nls arguments anonymousInnerClassDeclaration? | dim+ ( nls arrayInitializer )? )
dim      ::= annotationsOpt LBRACK expression? RBRACK
arrayInitializer
         ::= LBRACE nls ( variableInitializers nls )? RBRACE
anonymousInnerClassDeclaration
         ::= classBody
createdName
         ::= annotationsOpt ( primitiveType | qualifiedClassName typeArgumentsOrDiamond? )
nonWildcardTypeArguments
         ::= LT nls typeList nls GT
typeArgumentsOrDiamond
         ::= LT GT
           | typeArguments
arguments
         ::= LPAREN enhancedArgumentListInPar? COMMA? rparen
argumentList
         ::= firstArgumentListElement ( COMMA nls argumentListElement )*
enhancedArgumentList
         ::= firstEnhancedArgumentListElement ( COMMA nls enhancedArgumentListElement )*
enhancedArgumentListInPar
         ::= enhancedArgumentListElement ( COMMA nls enhancedArgumentListElement )*
firstArgumentListElement
         ::= expressionListElement
           | namedArg
argumentListElement
         ::= expressionListElement
           | namedPropertyArg
firstEnhancedArgumentListElement
         ::= expressionListElement
           | standardLambdaExpression
           | namedArg
enhancedArgumentListElement
         ::= expressionListElement
           | standardLambdaExpression
           | namedPropertyArg
stringLiteral
         ::= StringLiteral
className
         ::= CapitalizedIdentifier
identifier
         ::= Identifier
           | CapitalizedIdentifier
           | VAR
           | IN
           | TRAIT
           | AS
builtInType
         ::= BuiltInPrimitiveType
           | VOID
keywords ::= ABSTRACT
           | AS
           | ASSERT
           | BREAK
           | CASE
           | CATCH
           | CLASS
           | CONST
           | CONTINUE
           | DEF
           | DEFAULT
           | DO
           | ELSE
           | ENUM
           | EXTENDS
           | FINAL
           | FINALLY
           | FOR
           | GOTO
           | IF
           | IMPLEMENTS
           | IMPORT
           | IN
           | INSTANCEOF
           | INTERFACE
           | NATIVE
           | NEW
           | PACKAGE
           | RETURN
           | STATIC
           | STRICTFP
           | SUPER
           | SWITCH
           | SYNCHRONIZED
           | THIS
           | THROW
           | THROWS
           | TRANSIENT
           | TRAIT
           | THREADSAFE
           | TRY
           | VAR
           | VOLATILE
           | WHILE
           | NullLiteral
           | BooleanLiteral
           | BuiltInPrimitiveType
           | VOID
           | PUBLIC
           | PROTECTED
           | PRIVATE
rparen   ::= RPAREN
nls      ::= NL*
sep      ::= ( NL | SEMI )+

<?TOKENS?>

EOF      ::= $